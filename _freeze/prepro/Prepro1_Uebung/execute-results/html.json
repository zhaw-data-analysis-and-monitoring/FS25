{
  "hash": "aacd5784e3ff2765f6be15c1e550db00",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate: 2024-02-20\nlesson: PrePro1\ntopic: Data Types\nindex: 2\nexecute:\n  echo: false # set to true to show sample solution\n  output: false # set to true to show sample solution\ncode-fold: true\ncode-summary: \"Sample Solution\"\n---\n\n# PrePro 1: Exercise\n\n\n\n## Working with RStudio \"Project\"\n\nWe recommend using \"Projects\" within RStudio. RStudio then creates a folder for each project in which the project file is stored (file extension `.rproj`). If Rscripts are loaded or generated within the project, they are then also stored in the project folder. You can find out more about RStudio Projects [here](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).\n\nThere are several benefits to using Projects. You can:\n\n- specify the Working Directory without using an explicit path (`setwd())`. This is useful because the path can change (when collaborating with other users, or executing the script at a later date)\n- automatically cache open scripts and restore open scripts in the next session\n- set different project-specific options\n- use version control systems (e.g., *git*)\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n## Task 1\n\nCreate a `data.frame` with the following data. Tipp: Create a vector for each column first.\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|Species | Number| Weight|Sex |Description               |\n|:-------|------:|------:|:---|:-------------------------|\n|Fox     |      2|    4.4|m   |Reddish                   |\n|Bear    |      5|   40.3|f   |Brown, large              |\n|Rabbit  |      1|    1.1|m   |Small, with long ears     |\n|Moose   |      3|  120.0|m   |Long legs, shovel antlers |\n\n\n:::\n:::\n\n## Task 2\n\nWhat *types* of data were automatically accepted in the last task? Check this using `str()`, see whether they make sense and convert where necessary.\n\n::: {.cell}\n\n:::\n\n\n\n## Input: Libraries / packages\n\nLibraries (aka packages) are are \"extensions\" to the basic R functionality. \nR packages have become indispensable to using R. The vast majority of packages are hosted on [CRAN](https://cran.r-project.org/) and can be easily installed using `install.packages(\"packagename\")`. This installation is done *once*. To use the library, you must load it into the current R session using `library(packagename)`.\n\nE.g. To import data, we recommend using the `readr` package[^readr]. Install the package using the command `install.package(\"readr\")`. To use the package, load it into the current R session using `library(\"readr\")`. \n\n\n[^readr]: Advantages of `read_delim` over `read.csv`: <https://stackoverflow.com/a/60374974/4139249>\n\n## Task 3\n\nOn Moodle, you will find a folder called *Datasets*. Download the file and move it **in your project folder**. Import the `weather.csv` file. If you use the RStudio GUI for this, save the import command in your R-Script. Please use a relative path (i.e., **not** a path starting with `C:\\`, or similar).)\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|stn |       time| tre200h0|\n|:---|----------:|--------:|\n|ABO | 2000010100|     -2.6|\n|ABO | 2000010101|     -2.5|\n|ABO | 2000010102|     -3.1|\n|ABO | 2000010103|     -2.4|\n|ABO | 2000010104|     -2.5|\n|ABO | 2000010105|     -3.0|\n|ABO | 2000010106|     -3.7|\n|ABO | 2000010107|     -4.4|\n|ABO | 2000010108|     -4.1|\n|ABO | 2000010109|     -4.1|\n\n\n:::\n:::\n\n## Task 4\n\nHave a look at your dataset in the console. Have the data been interpreted correctly?\n\n::: {.cell}\n\n:::\n\n## Task 5\n\nThe `time` column is a date/time with a format of YYYYMMDDHH ( see *meta.txt*). In order for R to recognise the data in this column as date/time, it must be in the correct format (`POSIXct`). Therefore, we must tell R what the current format is. Use `as.POSIXct()` to read the column into R, remembering to specify both `format` and `tz`.\n\n:::{.callout-tip}\n- If no time zone is set, `as.POSIXct()` sets a default (based on `sys.timezone()`). In our case, however, these are values in UTC (see *metadata.csv*)\n- *as.POSIXct* requires a `character` input: If you receive the error message `'origin' must be supplied` (or similar), you have probably tried to input a `numeric` into the function with.\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: The new table should look like this\n\n|stn |time                | tre200h0|\n|:---|:-------------------|--------:|\n|ABO |2000-01-01 00:00:00 |     -2.6|\n|ABO |2000-01-01 01:00:00 |     -2.5|\n|ABO |2000-01-01 02:00:00 |     -3.1|\n|ABO |2000-01-01 03:00:00 |     -2.4|\n|ABO |2000-01-01 04:00:00 |     -2.5|\n|ABO |2000-01-01 05:00:00 |     -3.0|\n|ABO |2000-01-01 06:00:00 |     -3.7|\n|ABO |2000-01-01 07:00:00 |     -4.4|\n|ABO |2000-01-01 08:00:00 |     -4.1|\n|ABO |2000-01-01 09:00:00 |     -4.1|\n\n\n:::\n:::\n\n## Task 6\n\nCreate two new columns for day of week (Monday, Tuesday, etc) and calendar week. Use the newly created `POSIXct` column and a suitable function from `lubridate`.\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n\n\n|stn |time                | tre200h0|weekday | week|\n|:---|:-------------------|--------:|:-------|----:|\n|ABO |2000-01-01 00:00:00 |     -2.6|Sat     |    1|\n|ABO |2000-01-01 01:00:00 |     -2.5|Sat     |    1|\n|ABO |2000-01-01 02:00:00 |     -3.1|Sat     |    1|\n|ABO |2000-01-01 03:00:00 |     -2.4|Sat     |    1|\n|ABO |2000-01-01 04:00:00 |     -2.5|Sat     |    1|\n|ABO |2000-01-01 05:00:00 |     -3.0|Sat     |    1|\n|ABO |2000-01-01 06:00:00 |     -3.7|Sat     |    1|\n|ABO |2000-01-01 07:00:00 |     -4.4|Sat     |    1|\n|ABO |2000-01-01 08:00:00 |     -4.1|Sat     |    1|\n|ABO |2000-01-01 09:00:00 |     -4.1|Sat     |    1|\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}