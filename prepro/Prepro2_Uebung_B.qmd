---
date: 2024-02-27
lesson: PrePro2
topic: Piping / Joins
index: 3
execute:
  echo: false # set to true to show sample solution
  output: false # set to true to show sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true
---

# Prepro 2: Exercise B

```{r}
#| echo: true
#| code-fold: false

# Required Packages
library("dplyr")
library("readr")
```

## Task 1

You have data from three sensors (*sensor1.csv*, *sensor2.csv*, *sensor3.csv*). Read in the data sets.

```{r}
sensor1 <- read_delim("datasets/prepro/sensor1.csv", ";")
sensor2 <- read_delim("datasets/prepro/sensor2.csv", ";")
sensor3 <- read_delim("datasets/prepro/sensor3.csv", ";")
```

## Task 2

From the 3 data frames, create a single data frame that looks like the one shown below. Use two joins from `dplyr` to connect 3 `data.frames`. Then tidy up the column names ([how can we do that?](https://www.statology.org/how-to-rename-data-frame-columns-in-r/)).

```{r}
sensor1_2 <- full_join(sensor1, sensor2, "Datetime")

sensor1_2 <- rename(sensor1_2, sensor1 = Temp.x, sensor2 = Temp.y)

sensor_all <- full_join(sensor1_2, sensor3, by = "Datetime")

sensor_all <- rename(sensor_all, sensor3 = Temp)
```

```{r}
#| echo: false
#| output: true

knitr::kable(head(sensor_all))
```

## Task 3

Import the *sensor_fail.csv* file into R.

```{r}
sensor_fail <- read_delim("datasets/prepro/sensor_fail.csv", delim = ";")
```

`sensor_fail.csv` has a variable `SensorStatus`: `1` means the sensor is measuring, `0` means the sensor is not measuring. If sensor `status = 0`, the `Temp = 0` value is incorrect. It should be `NA` (not available). Correct the dataset accordingly.

```{r}
#| echo: false
#| output: true

knitr::kable(sensor_fail)
```

```{r}
# with base-R:
sensor_fail$Temp_correct[sensor_fail$SensorStatus == 0] <- NA
sensor_fail$Temp_correct[sensor_fail$SensorStatus != 0] <- sensor_fail$Temp # Warning message can be ignored.

# the same with dplyr:
sensor_fail <- sensor_fail |>
  mutate(Temp_correct = ifelse(SensorStatus == 0, NA, Temp))
```

## Task 4

Why does it matter if `0` or `NA` is recorded? Calculate the mean of the temperature / humidity after you have corrected the dataset.

```{r}
# Mean values of the incorrect sensor data: 0 flows into the calculation
# and distorts the mean
mean(sensor_fail$Temp)

# Mean values of the corrected sensor data: with na.rm = TRUE,
# NA values are removed from the calculation.
mean(sensor_fail$Temp_correct, na.rm = TRUE)

```
