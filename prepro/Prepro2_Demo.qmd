---
date: 2024-02-27
lesson: PrePro2
topic: Piping / Joins
index: 1
knitr:
  opts_chunk:
    collapse: true
---

# Prepro 2: Demo

```{r}
#| purl: false
#| echo: false
#| output: false

knitr::purl("prepro/Prepro2_Demo.qmd", "prepro/Prepro2_Demo.R", documentation = 0)
```

The code for this demo can also [be downloaded as an R Script](Prepro2_Demo.R) (right click → *Save Target As..*)

## Piping

We want to extract the temperature data from a character string (`temperature`), and then convert the Kelvin value into Celsius according to the following formula, before finally calculating the mean of all the values:

$$°C = K - 273.15$$

```{r}
# these temperature are in Kelvin:
temperature <- c("310","322","348")

temperature
```


Translated into R-code, this results in the following operation:

```{r}

subtract <- function(x,y){x-y} # helperfunction to subtract y from x

output <- mean(subtract(as.integer(temperature), 273.15))
#                                 \___1_____/
#                       \_____________2_______/
#              \______________________3________________/
#         \___________________________4_________________/

# 1. Take temperature
# 2. Convert "character" → "integer"
# 4. Subtract 273.15
# 5. Calculate the mean
```

The whole operation is easier to read if it is written down sequentially:

```{r}
tmp <- as.integer(temperature)   # 2
tmp <- subtract(tmp, 273.15)     # 3
output <- mean(tmp)              # 4
output
```

The fact that the intermediate results must always be saved and retrieved again in the subsequent operation makes this somewhat cumbersome. This is where "piping" comes into play: *It makes the output of one function the first parameter of the subsequent function.*

```{r}
temperature |>        # 1
  as.integer() |>     # 2
  subtract(273.15) |> # 3
  mean()              # 4
```

:::{.callout-important}
- the `|>` pipe operator was first introduced in R `4.1`
- In addition to the *base R* pipe operator, there is also a very similar[^pipe] pipe operator, `%>%`, in the `magrittr` package.
- The <kbd>Ctrl</kbd> +<kbd>Shift</kbd>+<kbd>M</kbd> keyboard shortcut in RStudio inserts a pipe operator.
- By checking the Use native pipe operator setting in RStudio Settings `Tools` → `Global Options` → `Code`, you can control which `pipe operator`, `|>` or `%>%`, is inserted with the above key combination.
- We recommend using the base-R pipe operator `|>`
:::

[^pipe]: see <https://stackoverflow.com/q/67633022/4139249>

## Joins

```{r}
students <- data.frame(
  Matriculation_No = c(100002, 100003, 200003),
  Student = c("Patrick", "Manuela", "Eva"),
  ZIP = c(8006, 8001, 8820)
)

students

localities <- data.frame(
  ZIP = c(8003, 8006, 8810, 8820),
  LocalityName = c("Zurich", "Zurich", "Horgen", "Wadenswil")
)

localities
```

```{r}
# Load library
library("dplyr")

inner_join(students, localities, by = "ZIP")

left_join(students, localities, by = "ZIP")

right_join(students, localities, by = "ZIP")

full_join(students, localities, by = "ZIP")
```

```{r}
students <- data.frame(
  Matriculation_No = c(100002, 100003, 200003),
  Student = c("Patrick", "Manuela", "Pascal"),
  Residence = c(8006, 8001, 8006)
)

left_join(students, localities, by = c("Residence" = "ZIP"))
```


