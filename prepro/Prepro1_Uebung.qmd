---
date: 2024-02-20
lesson: PrePro1
topic: Data Types
index: 2
execute:
  echo: true # set to true to show sample solution
  output: true # set to true to show sample solution
code-fold: true
code-summary: "Sample Solution"
---

# PrePro 1: Exercise

```{r}
#| include: false
#| purl: false

knitr::opts_chunk$set(collapse = TRUE)
```

## Working with RStudio "Project"

We recommend using "Projects" within RStudio. RStudio then creates a folder for each project in which the project file is stored (file extension `.rproj`). If Rscripts are loaded or generated within the project, they are then also stored in the project folder. You can find out more about RStudio Projects [here](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects).

There are several benefits to using Projects. You can:

- specify the Working Directory without using an explicit path (`setwd())`. This is useful because the path can change (when collaborating with other users, or executing the script at a later date)
- automatically cache open scripts and restore open scripts in the next session
- set different project-specific options
- use version control systems (e.g., *git*)






```{r}
#| echo: true
#| code-fold: false

```

## Task 1

Create a `data.frame` with the following data. Tipp: Create a vector for each column first.

```{r}
df <- data.frame(
  Species = c("Fox", "Bear", "Rabbit", "Moose"),
  Number = c(2, 5, 1, 3),
  Weight = c(4.4, 40.3, 1.1, 120),
  Sex = c("m", "f", "m", "m"),
  Description = c("Reddish", "Brown, large", "Small, with long ears", "Long legs, shovel antlers")
)
```

```{r}
#| echo: false
#| purl: false
#| output: true

knitr::kable(df)
```

## Task 2

What *types* of data were automatically accepted in the last task? Check this using `str()`, see whether they make sense and convert where necessary.

```{r}
str(df)
typeof(df$Number)
# Number was interpreted as `double`, but it is actually an `integer`.

df$Number <- as.integer(df$Number)

# We know sex only has two options:
df$Sex <- factor(df$Sex, levels = c("m","f"))
```



## Input: Libraries / packages

Libraries (aka packages) are are "extensions" to the basic R functionality. 
R packages have become indispensable to using R. The vast majority of packages are hosted on [CRAN](https://cran.r-project.org/) and can be easily installed using `install.packages("packagename")`. This installation is done *once*. To use the library, you must load it into the current R session using `library(packagename)`.

E.g. To import data, we recommend using the `readr` package[^readr]. Install the package using the command `install.package("readr")`. To use the package, load it into the current R session using `library("readr")`. 


[^readr]: Advantages of `read_delim` over `read.csv`: <https://stackoverflow.com/a/60374974/4139249>

## Task 3

On Moodle, you will find a folder called *Datasets*. Download the file and move it **in your project folder**. Import the `weather.csv` file. If you use the RStudio GUI for this, save the import command in your R-Script. Please use a relative path (i.e., **not** a path starting with `C:\`, or similar).)




```{r}

library("readr")


weather <- read_delim("datasets/prepro/weather.csv", ",")

```

```{r}
#| purl: false
#| echo: false
#| output: true

knitr::kable(head(weather, 10))
```

## Task 4

Have a look at your dataset in the console. Have the data been interpreted correctly?

```{r}
# The 'time' column was interpreted as 'integer'. However, it is 
# obviously a time indication.
```

## Task 5

The `time` column is a date/time with a format of YYYYMMDDHH. In order for R to recognise the data in this column as date/time, it must be in the correct format (`POSIXct`). Therefore, we must tell R what the current format is. Use `as.POSIXct()` to read the column into R, remembering to specify both `format` and `tz`.

:::{.callout-tip}
- If no time zone is set, `as.POSIXct()` sets a default (based on `sys.timezone()`). In our case, however, these are values in UTC (see *metadata.csv*)
- *as.POSIXct* requires a `character` input: If you receive the error message `'origin' must be supplied` (or similar), you have probably tried to input a `numeric` into the function with.
:::

```{r}
weather$time <- as.POSIXct(as.character(weather$time), format = "%Y%m%d%H", tz = "UTC")
```

```{r}
#| purl: false
#| echo: false
#| output: true

knitr::kable(head(weather, 10), caption = "The new table should look like this")
```

## Task 6

Create two new columns for day of week (Monday, Tuesday, etc) and calendar week. Use the newly created `POSIXct` column and a suitable function from `lubridate`.

```{r}

library("lubridate")


weather$weekday <- wday(weather$time, label = T)
weather$week <- week(weather$time)
```

```{r}
#| purl: false
#| echo: false
#| output: true

knitr::kable(head(weather, 10))
```

