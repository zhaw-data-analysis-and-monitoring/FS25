---
date: 2024-04-30
lesson: SpatAn2
topic: Raster Data
index: 4
execute:
  echo: false # set to true to show sample solution
  output: false # set to true to show sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true  
---

# SpatAn 2: Exercise B {#sec-raster-intro}

In [the last exercise](#sec-raster-intro1), you had your first experience with raster data. We first rasterised a vector dataset. However, we often work with spatial data that has already been captured in raster format.

## Task 1

In this exercise, we will continue to work with `terra` to show how we can import, visualise and further process a raster dataset. In your data you will find a dataset called *dhm250m.tif*, which represents the "Digital Elevation Model" (DHM) of the Canton of Schwyz. Execute the specified code.

```{r}
#| echo: true
#| code-fold: false

library("terra")
```

Import your raster with the `rast()` function

```{r}
#| echo: true
#| code-fold: false

dhm_schwyz <- rast("datasets/rauman/dhm250m.tif")
```

You will get some important metadata about the raster data when you enter the variable name in the console.

```{r}
#| code-fold: false
#| output: true

dhm_schwyz
```

To get a quick overview of a raster record, we can simply use the `plot()` function.

```{r}
#| code-fold: false
#| output: true

plot(dhm_schwyz)
```

Unfortunately, using `raster data` in ggplot is not very easy. Since `ggplot()` is a universal plot framework, we quickly reach the limits of what is possible when we create something as special as a map. `Plot` allows us to work very quickly, but again, it has its limits. 

For this reason, we will introduce a new plot framework that specialises in maps and is built in a very similar design to ggplot: `tmap`. Load this package into your session now:

```{r}
#| echo: true
#| code-fold: false

library("tmap")
```

Just like `ggplot()`, `tmap` is based on the idea of "layers" connected by a `+`. Each level has two components:

- a dataset component that is always `tm_shape(dataset)` (replace `dataset` with your variable)
- a geometry component that describes how the previous `tm_shape()` should be visualised. This can be `tm_dots()` for points, `tm_polygons()` for polygons, `tm_lines()` for lines, etc. For single band raster (which is the case with `dhm_ schwyz`), use `tm_raster()`

```{r}
#| output: true

tm_shape(dhm_schwyz) +
  tm_raster()
```

Note that `tm_shape()` and `tm_raster()` (in this case) cannot exist without each other.

If you consult`?tm_raster`, you will see a variety of options that you can how your data is visualised. For example, the default style of `tm_raster()` creates "bins" with a discrete colour gamut. We can override this with `style = "cont"`.

```{r}
#| output: true

tm_shape(dhm_schwyz) +
  tm_raster(style = "cont")
```

That should look appropriate, but maybe we want to change the default colour palette. Fortunately, this is much easier in `tmap` than in `ggplot2`. To view the available palettes, enter `tmaptools ::palette_explorer()` or `RColorBrewer:: display.brewer.all()` in the console (for the former, you may need to install additional packages, e.g. `shinyjs`).

```{r}
#| output: true

tm_shape(dhm_schwyz) +
  tm_raster(style = "cont", palette = "Spectral")
```

One of `tmap`'s great strengths is the fact that both static and interactive plots can be created with the same command. For this, you need to change the mode from static to interactive.

```{r}
#| output: true

tmap_mode("view") # changes to interactive Plots

tm_shape(dhm_schwyz) +
  tm_raster(style = "cont", palette = "Spectral")

tmap_mode("plot") # changes back to static plots
```

## Task 2 {#sec-raster-slope}

Using `terra`, we can run a variety of raster operations on our elevation model. A classic raster operation is the calculation of a slope's incline ("slope") or its orientation ("aspect"). Use the `terrain()` function from `terra` to calculate the slope inclination and orientation. Visualise the results.

```{r}
#| output: true

terrain(dhm_schwyz, "slope") |>
  plot()
```

```{r}
#| output: true

schwyz_aspect <- terrain(dhm_schwyz, "aspect")

plot(schwyz_aspect)
```

::: {.callout-note}
"aspect" is a value that ranges from 0 to 360. In classic palettes, the two extreme values (in this case 0 and 360) are far apart in terms of colour. In aspect, however, these should be close together (since an orientation of 1째 is only 2 degrees away from an orientation of 359째). To take this fact into account, we can create our own colour palette, where the first colour is repeated.
:::

```{r}
#| output: true
#| echo: true

tm_shape(schwyz_aspect) +
  tm_raster(
    palette = c("#EF476F", "#FFD166", "#06D6A0", "#118AB2", "#EF476F"),
    style = "cont", breaks = seq(0, 360, 90)
  )
```

## Task 3

Using slope incline and orientation, we can calculate a *hill shading* effect. Hill shading refers to the shadow cast on the surface model and is calculated at a given angle of the sun (height and azimuth). The typical angle is 45째 above the horizon and 315째 from the northwest.

To create a hill shading effect, first calculate `slope` and `aspect` of `dhm_schwyz`, just like in the previous task, **but make sure that the unit corresponds to the `radians`**. Use these two objects in the `shade()` function to calculate the hill shade. Then visualise the output with `plot` or `tmap`.

```{r}
#| output: true
#| fig-cap: Use `tmap` for this visualisation along side the *cividis* colour palette

dhm_slope <- terrain(dhm_schwyz, "slope", unit = "radians")
dhm_aspect <- terrain(dhm_schwyz, "aspect", unit = "radians")

dhm_hillshade <- shade(dhm_slope, dhm_aspect, 45, 315)

tm_shape(dhm_hillshade) +
  tm_raster(style = "cont", palette = "cividis", legend.show = FALSE) +
  tm_layout(frame = FALSE)
```