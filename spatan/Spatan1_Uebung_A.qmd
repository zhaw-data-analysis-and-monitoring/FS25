---
date: 2024-04-30
lesson: SpatAn1
topic: Introduction
index: 1
execute:
  echo: false # set to true to show sample solution 
  output: false # set to true to show sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true  
---

# SpatAn 1: Exercise A


```{r}
#| echo: true
#| code-fold: false



```

You can download the datasets for the exercises from Moodle- 


## Task 1: Import vector data

Import the *kantone.gpkg* and *gemeinden.gpkg* records as follows. These are geodatasets in the geopackage (`\* .gpkg`) format.

```{r}
#| echo: true
#| code-fold: false
library("sf")

cantons <- read_sf("datasets/rauman/kantone.gpkg")
municipalities <- read_sf("datasets/rauman/gemeinden.gpkg")
```

Look at the imported records *in your terminal* (see @nte-sf-terminal).

:::{#nte-sf-terminal .callout-note}
You will get the most information about `sf` objects if you look at the record *in the console* (by typing the variable name in the console). When using the RStudio Viewer, `sf` objects load very slowly and metadata is not displayed.
:::

## Task 2: Visualise data

A very simple way of visualising `sf` objects is to use the `plot()` function in base-R. Execute the specified R commands and study the resulting plots. What differences can you see? How do you explain these differences?

```{r}
#| echo: true
#| output: true
#| code-fold: false

# without max.plot = 1 will result in R per plot per column
plot(municipalities, max.plot = 1)

# Alternatively, you can also plot a specific column
plot(cantons["KANTONSFLA"])
```

## Input: Coordinate systems

In the above visualisation, the following is noticeable:

- the X/Y axes have two very different number ranges (see the axis labels)
- the outline of Switzerland looks different in the two datasets (`cantons` are compressed against `municipalities`)

Of course, this has to do with the fact that the two data sets were recorded in different coordinate systems. Coordinate systems are abbreviated to CRS (**C**oordinate **R**eference **S**ystem). The assigned coordinate systems can be queried with `st_crs()`.

```{r}
#| echo: true
#| output: true
#| code-fold: false

st_crs(cantons)
st_crs(municipalities)
```

Unfortunately, no coordinate systems are assigned in our case. With a little experience, however, you can guess which coordinate system is used, because a lot of them can be ruled out. The three most common coordinate systems in Switzerland are as follows:

- `CH1903 LV03`: the old coordinate system of Switzerland
- `CH1903+ LV95`: the new coordinate system of Switzerland
- `WGS84`: a frequently used, global geodetic coordinate system, i.e., the coordinates are given in length and width (lat/lon).

It is important to determine the correct coordinate system on the basis of the coordinates shown in the `geometry` column. If you select a location by right clicking on [map.geo.admin.ch](https://map.geo.admin.ch), you can find the coordinates of this location in various coordinate reference systems (see @fig-map-geo-admin).

::: {#fig-map-geo-admin}

![](../images/map.geo.admin.png)

The sampe location in different coordinate systems, displayed on the website [map.geo.admin.ch](https://map.geo.admin.ch)

:::




If you compare these coordinates with the coordinates of our data sets, it quickly becomes clear that the `cantons` dataset is the coordinate reference system (CRS) WGS84. We can use this information to set the CRS of our dataset with `st_set_crs()`.

```{r}
#| echo: true
#| code-fold: false

# Assign with st_set_crs()...
cantons <- st_set_crs(cantons, "WGS84")
```

If we now retrieve the CRS information, we should see that this task has been successfully completed.

```{r}
#| echo: true
#| output: true
#| code-fold: false

# ... query with st_crs()
st_crs(cantons)
```

It is a bit more complicated if we want to set the CRS of the `municipalities` dataset. In comparison with map.geo.admin.ch, we can see that this must be the CRS `CH1903+ LV95`. Using this name for our CRS assignment won't work:

```{r}
#| echo: true
#| code-fold: false

# Assign with st_set_crs()...
municipalities <- st_set_crs(municipalities, "CH1903+ LV95")

# ... query with st_crs()
st_crs(municipalities)
```

The advertised names of these CRS are prone to errors. Therefore, it is better to work with the respective EPSG codes of the reference systems. These EPSG codes can be found on the following website: [epsg.io/map](https://epsg.io/map#srs=4326&x=8.407288&y=46.773731&z=9&layer=streets). It is worth noting the EPSG codes of the relevant CRS:

- [CH1903 LV03](https://epsg.io/21781): `EPSG:21781`
- [CH1903+ LV95](https://epsg.io/2056): `EPSG:2056`
- [WGS84](https://epsg.io/4326): `EPSG:4326`

We can use this code to set the CRS of the `municipalities` dataset:

```{r}
#| echo: true
#| output: true
#| code-fold: false

# Assign with st_set_crs()...
municipalities <- st_set_crs(municipalities, 2056)

# ... query with st_crs()
st_crs(municipalities)
```

Now that the CRS of the datasets is known, we can use `ggplot2` to visualise our data. In InfoVis 1 & 2, we worked intensively with `ggplot2` and got to know the `geom_point()` and `geom_line()` layers. `ggplot()` is also able to very easily plot vector data  with `geom_sf()`.

```{r}
library("ggplot2") # Add this line to the top of you script

ggplot() +
  # In geom_sf neither x nor y axes need to be defined
  geom_sf(data = municipalities)
```

## Task 3: Transform coordinate systems

In the previous exercise, we *assigned* a coordinate system but we did *not* manipulate the existing coordinates (in the `geom` column). It is quite different to *transfer* the data from one coordinate system to the other. In the process of transforming the system, the coordinates are converted and thus manipulated. For practical reasons, <!-- What are the reasons? Can you explain in more detail? -->
we will transfer all our data into the new Swiss coordinate system CH1903+ LV95. Transform the `cantons` record with `st_transform()` into CH1903+ LV95, using the correct EPSG code.

Before transforming the data (consider the attributes `Bounding box`, `Projected CRS` as well as the values in the `geomcolumn`):

```{r}
#| echo: true
#| code-fold: false
#| output: true

cantons
```

```{r}
cantons <- st_transform(cantons, 2056)
```

After transferring the data (consider the `Bounding box` and `Projected CRS` attributes as well as the values in the `geom` column):

```{r}
#| echo: true
#| code-fold: false
#| output: true

cantons
```

## Task 4: Tidyverse functions

`sf` objects are essentially `data.frames` with a few metadata and a special `geometry` column. We can perform the same operations as with `data.frames`. For example, we can calculate the population density from the columns `EINWOHNERZ` and `KANTONSFLA`:

```{r}
#| echo: true
#| code-fold: false

library("dplyr")  # Add this line to the top of you script

cantons <- cantons |>
  mutate(
    # convert hectares to km2
    area_km2 = KANTONSFLA / 100,
    # calculate population density per km2
    population_density = EINWOHNERZ / area_km2
  )
```

Now calculate the population density at the level of the municipalities.

```{r}
#| code-fold: false

municipalities <- municipalities |>
  mutate(
    area_km2 = GEM_FLAECH / 100,
    population_density = EINWOHNERZ / area_km2
  )
```

## Task 5: Chloropleth Maps

Now we want to colour the municipalities or the cantons according to their population density. As usual, we use the `aes(fill = ...)` method from `ggplot()`.

```{r}
#| output: true

ggplot(cantons) +
  geom_sf(aes(fill = population_density))
```

There are hardly any differences in colour, because the extremely high population density of Basel-Stadt (>5,000 inhabitants per km<sup>2</sup>!) dominates the entire colour scale. [Switzerland's Statistical Atlas](https://www.atlas.bfs.admin.ch/maps/13/de/15467_75_3501_70/24216.html) solves the problem by using classes with irregular thresholds and grouping all numbers >2,000. We can reproduce this procedure with `cut()`.

```{r}
#| echo: true
#| code-fold: false

# Threshold is the same as BFS "Statistical Atlas of Switzerland"
breaks = c(0, 50, 100, 150, 200, 300, 500, 750, 1000, 2000, Inf)

# show classes based on thresholds
cantons <- cantons |>
    mutate(population_density_classes = cut(population_density, breaks))

p_cantons <- ggplot(cantons, aes(fill = population_density_classes)) +
  geom_sf(colour = NA) +
  scale_fill_brewer(palette = "RdYlGn",direction = -1) +
  theme_void() +
  theme(legend.position = "none")
```

Create the same classes for the population density of the communities and compare the plots.

```{r}
municipalities <- municipalities |>
  mutate(population_density_classes = cut(population_density, breaks))

p_municipalities <- ggplot(municipalities, aes(fill = population_density_classes)) +
  geom_sf(colour = NA) +
  scale_fill_brewer(palette = "RdYlGn",direction = -1) +
  theme_void() +
  theme(legend.position = "none")
```

```{r}
#| echo: false
#| column: page
#| layout-ncol: 2
#| fig-subcap:
#|   - "Cantons"
#|   - "Municipalities"
#| fig.cap: Comparing these depictions clearly shows the problems of MAUP 
#| label: fig-ggplot-ex4

p_cantons

p_municipalities
```
