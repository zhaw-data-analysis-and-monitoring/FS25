---
date: 2024-04-30
lesson: SpatAn2
topic: Raster Data
index: 5
execute:
  echo: false # set to true to show sample solution
  output: false # set to true to show sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true  
---

# SpatAn 2: Exercise C1

We need the following datasets. Import these into R. Check whether the CRS has been set correctly, set it if necessary. Familiarise yourself with the data (visualise, scroll through, etc.).

- *rotmilan.gpkg*: This dataset comes from a larger research project of the [Sempach Bird Observatory](https://www.vogelwarte.ch/de/projekte/oekologische-forschung/mechanismen-der-populationsdynamik-beim-rotmilan), which was made available via the movebank platform (see @scherler2020). It is based on the movements of a single bird which has been equipped with a transmitter since 2017 and travels all over Central Europe. In this exercise, we will only work with the data points recorded in Switzerland. If you want to analyse the entire data set, you can download it via the Movebank link.
- *luftqualitaet.gpkg*: This dataset includes measurements of nitrogen dioxide $NO_2$ from 2015 at 97 measurement points in Switzerland. Nitrogen dioxide is produced during the combustion of fuels, especially at high combustion temperatures, with road traffic as the main source.
   More information can be found [here](https://www.bafu.admin.ch/bafu/de/home/themen/thema-luft/luft--daten--indikatoren-und-karten/luft--indikatoren/indikator-luft.pt.html/aHR0cHM6Ly93d3cuaW5kaWthdG9yZW4uYWRtaW4uY2gvUHVibG/ljL0FlbURldGFpbD9pbmQ9TFUwMjAmbG5nPWRlJlN1Ymo9Tg%3d%3d.html).
- *schweiz.gpkg*: Swiss border

First of all, we want to carry out density estimates for the `air_quality` and `red_kites` data sets. Load the necessary packages into your R session beforehand.

```{r}
#| echo: true
#| code-fold: false

library("sf")
library("dplyr")
library("ggplot2")

library("spatstat.geom")
library("spatstat.explore")
```

```{r}
#| results: asis

air_quality <- read_sf("datasets/rauman/luftqualitaet.gpkg")
red_kites <- read_sf("datasets/rauman/rotmilan.gpkg")
switzerland <- read_sf("datasets/rauman/schweiz.gpkg")
```

## Task 1: Visualise red kite movement data

The first question typically asked in such movement studies is: *where can this bird usually be found?* To answer this question, the first thing to do is simply visualise the data points in a simple map. Create the map below to answer this question.

```{r}
#| output: true

ggplot(switzerland) +
  geom_sf() +
  geom_sf(data = red_kites) +
  theme_void()
```

## Task 2: Calculate Kernel Density Estimation

At first, this approach appears to work, but here we encounter the typical problem of "overplotting". This means that due to the overlay of many points in dense regions, we cannot estimate how many points are actually there and potentially overlapping. There are various ways to visualise the point density more clearly. A very popular method among biologists is density distribution with a Kernel Density Estimation (KDE). This is mainly because the habitat (home range) of an animal can be estimated using KDE. Home ranges are often defined with KDE95 and core areas are defined with KDE50 ([Fleming C., Calabrese J., 2016](https://besjournals.onlinelibrary.wiley.com/doi/full/10.1111/2041-210X.12673)).

To calculate the density, we use the `density.ppp` function from` spatstat`. This library is somewhat complex to use, but so that we can still apply this method to our red kite data, we have created our own KDE function.

We encourage those of you who can study our function in detail to not use it, and instead to use `spatstat` directly. If you want to work with our function, you'll need to copy and execute the code below into your script.

```{r}
#| echo: true
#| code-fold: false

my_kde <- function(points, cellsize, bandwith, extent = NULL){
  library("spatstat.geom")    # to convert to ppp
  library("spatstat.explore") # to calculate density

  points_ppp <- as.ppp(points) # convert sf > ppp

  if(!is.null(extent)){
    # if an extent has been given, this will be used
    # to set the observation window
    Window(points_ppp) <- as.owin(st_bbox(extent))
  }

  # Calculate density
  points_density <- density.ppp(x = points_ppp, sigma = bandwith, eps = cellsize)

  # Convert Output in a DataFrame
  points_density_df <- as.data.frame(points_density)

  points_density_df
}
```

The parameters of the function should be relatively clear:

- `points`: a point record from the class `sf`
- `cellsize`: the cell size of the output grid
- `bandwith`: The search radius for the density calculation
- `extent` (optional): the perimeter in which the density distribution is to be calculated. If no perimeter is specified, the "bounding box" of `points` should be used.

If we now use `my_kde()` to calculate density distribution, we get a `data.frame` with X and Y coordinates and a `value` column. Use these three columns with `geom_raster()` to visualise your `data` with `ggplot` `aes(x = X, y = Y, fill = value)`.
```{r}
#| echo: true
#| output: true
#| code-fold: false

red_kites_kde <- my_kde(points = red_kites, cellsize = 1000, bandwith = 10000, extent = switzerland)

head(red_kites_kde)
```

```{r}
#| output: true

ggplot() +
  geom_raster(data = red_kites_kde, aes(x, y, fill = value)) +
  geom_sf(data = switzerland, fill = NA) +
  scale_fill_viridis_c() +
  theme_void()
```

The kernel density estimation is now very much dominated by low values, as the density in most cells of our study area is close to zero. As mentioned, scientists are often only interested in the highest 95% of values. Follow these steps to depict results a little better:

1. Calculate the 95th percentile of all values with the function `quantile` and name this `q95`
2. Create a new column in `red_kites_kde` in which all values are lower than `q95` `NA`
3. (Optional): Transform the values with log10 to get a more differentiated gradient

We can hide the low values by representing only the highest 5% of the values. To accomplish this, we use `raster::quantile` to calculate the 95th percentile of all values and use this value as a "limit value" for the representation.

In addition, a logarithmic transformation of the values helps to make the colour scale somewhat more visible.

```{r}
#| output: true

q95 <- quantile(red_kites_kde$value, probs = 0.95)

red_kites_kde <- red_kites_kde |>
  mutate(
    value_new = ifelse(value > q95, value, NA),
    value_new = log10(value_new)
  )

ggplot() +
  geom_raster(data = red_kites_kde, aes(x, y, fill = value_new)) +
  geom_sf(data = switzerland, inherit.aes = FALSE, fill = NA) +
  scale_fill_viridis_c(na.value = NA) +
  theme_void()
```

## Task 3: Density distribution with Thiessen polygons

Thiessen polygons offer an exciting alternative for visualising differences in the density distribution of points in data sets.
We now want to try this out and construct Thiessen polygons for the red kite data in Switzerland. Use the instructions for creating Thiessen polygons from exercise B to create Thiessen polygons for the red kite positions.

```{r}
thiessenpolygone <- red_kites |>
  st_union() |>
  st_voronoi()
switzerland <- st_union(switzerland)

thiessenpolygone <- st_cast(thiessenpolygone)

thiessenpolygone_clip <- st_intersection(thiessenpolygone, switzerland)
```

```{r}
#| output: true
#| label: fig-ggplot-ex2-thiessen
#| fig.cap: 'It will be clearer if we depict Thiessen polygons without points,
#|   just how density within clusters appears'

ggplot() +
  geom_sf(data = switzerland) +
  geom_sf(data = thiessenpolygone_clip, fill = NA) +
  theme_void()
```

# SpatAn 2: Exercise C2

```{r}
#| echo: false

knitr::opts_chunk$set(echo = FALSE)
```

This exercise is about implementing two different interpolation methods in R. In the first interpolation method we will use *inverse distance weighted interpolation*. Later, we will use the *nearest neighbour* method. To do this, you will need the following packages:

```{r}
#| echo: true
#| code-fold: false

library("sf")
library("dplyr")
library("ggplot2")
library("gstat")
```

You will also need the following datasets:

```{r}
#| echo: true
#| results: asis
#| code-fold: false

air_quality <- read_sf("datasets/rauman/luftqualitaet.gpkg")
switzerland <- read_sf("datasets/rauman/schweiz.gpkg")
```

The `gstat` library offers various options for interpolating data points, including the *inverse distance weighted* method. Unfortunately, the package is not yet as user-friendly as `sf`: however, the package is currently being revised and it should be just as easily accessible in the future. So that you do not have to deal with the peculiarities of this library, we have prepared a function that should make it easier for you to use the IDW interpolation.

We have taken away some of the complexity and have provided you with a ready-to-use tool. While we provide a simpler function for ease of use, we also encourage those who can to explore and understand this function in detail, or even better, use the `gstat` package instead. If you want to work with our function, you have to copy and execute the code below into your script.

```{r}
#| echo: true
#| code-fold: false

my_idw <- function(groundtruth, column, cellsize, nmax = Inf, maxdist = Inf, idp = 2, extent = NULL){
  library("gstat")
  library("sf")

  if(is.null(extent)){
    extent <- groundtruth
  }

  samples <- st_make_grid(extent, cellsize, what = "centers")
  my_formula <- formula(paste(column,"~1"))
  idw_sf <- gstat::idw(formula = my_formula, groundtruth, newdata = samples, nmin = 1, nmax = nmax, maxdist = maxdist, idp = idp)

  idw_matrix <- cbind(as.data.frame(st_coordinates(idw_sf)), pred = st_drop_geometry(idw_sf)[,1])
  idw_matrix
}
```

Now you can interpolate the `air_quality` data set with `my_idw()`as follows.

```{r}
#| echo: true
#| eval: false
#| code-fold: false

my_idw(groundtruth = air_quality, column = "value", cellsize = 10000, extent = switzerland)
```

The following parameters are available:

- **Necessary parameters**:
   - `groundtruth`: point data record with measured values (`sf`object)
   - `column`: name of the column with the measured values (in quotation marks and closing characters)
   - `cellsize`: cell size of the output raster
- **Optional parameters**
   - `nmax`: maximum number of points to be taken into account for the interpolation. Default: `Inf` (all values in the given search radius)
   - `maxdist`: Search radius to be used for interpolation. Default `Inf` (all values up to `nmax`)
   - `idp`: ***Inverse Distance* Power:** the power with which the denominator is to be increased. Default: `2`. Values are weighted in the reciprocal of the square: $\frac{1}{dist^{idp}}$.
   - `extent`: area for which the interpolation is to be carried out. If nothing is specified (default `ZERO`), the extension of groundtruth `is` used.
- **Ouput**
   - the output of the function is a `data.frame` with 3 columns:
      - `X`, `Y` coordinates of the interpolated values
      - `pred`: the Interpolated Value

The output is a raster-like data type (see *Spatial Data Science* 1 lecture). We can visualise this with `geom_raster()` with `ggplot`. To do this, you must specify the `X` and `Y` coordinates in `aes`, and colour the interpolated value with `fill`.

### Task 1: Spatial interpolation with IDW

Calculates the IDW for the air quality measurements with different parameters and visualise the results in each case. Experiment with `nmax` and `maxdist`. What do you find?

Tips:

- You can find out what distances make sense with `maxdist` from the output of the G function (previous exercise)
- At the beginning, choose a slightly conservative (large) `cellsize` and only reduce it if your computer can handle it well
- Since the output from the interpolation is in the same coordinate reference system as `schweiz.gpkg`, these two data sets can be displayed in the same `ggplot`. For this, you have to set the *aesthetics* (`aes()`) for each layer individually, and not at the level of `ggplot()`.

::: {.column-body}
```{r}
#| output: true
#| error: false
#| label: fig-ggplot-ex1
#| fig.cap: Nitrogen Dioxide (NO2) in μg/m3, Interpolate over all of Switzerland using
#|   the Inverse Distance Weighted Method. The various plots depict changes in
#|   the Interpolation with increasing IDP values

library("purrr")
library("tidyr")

plots <- lapply(1:4, function(idp){
  idw <- my_idw(groundtruth = air_quality, column = "value", cellsize = 1000, nmax = Inf, maxdist = Inf, idp = idp, extent = switzerland)
  ggplot() +
    geom_raster(data = idw, aes(X,Y, fill = pred)) +
    geom_sf(data = switzerland, fill = NA) +
    geom_sf(data = air_quality, size = 1, shape = 3, alpha = 0.3) +
    scale_fill_gradientn(colours = rev(RColorBrewer::brewer.pal(11,"RdYlBu")), limits = c(0, 60), na.value = NA) +
    labs(fill = "μg/m3", title = paste("Inverse Distance Power (IDP):", idp)) +
    theme_void() +
    theme(legend.position = "bottom", legend.title = element_blank(),
      legend.key.width = unit(0.10, 'npc'),
      legend.key.height = unit(0.02, 'npc'))
})

cowplot::plot_grid(plotlist = plots)

ggsave("spatan/images/idw.png", height = 18, width = 20, units = "cm")
```
:::

### Task 2: Interpolation with Nearest Neighbour

Another simple way to interpolate is the creation of a Voronoi diagram, also known as Thiessen polygons or Dirichlet decomposition. `sf` has a `st_voronoi()` function, which assumes a point data set and constructs Thiessen polygons around the points. All it takes is a small preprocessing step: `sf` wants a voronoi diagram for each feature, i.e. for each *line* in our data set. This makes little sense for us, because each line consists of only one point. Therefore, we must first convert `air_quality` with `st_union()` from a `POINT` to a `MULTIPOINT` object in which all points are summarised in one line.

```{r}
air_quality_union <- st_union(air_quality)

thiessen_polygons <- st_voronoi(air_quality_union)
```

```{r}
#| output: true

ggplot() +
  geom_sf(data = switzerland) +
  geom_sf(data = thiessen_polygons, fill = NA)
```

`st_voronoi()` has pulled the Thiessen polygons a little further than we want them. However, this is a nice illustration of the edge effects of Thiessen polygons, which can become very large towards the edge (where it has fewer and fewer points). We can clip the polygons to just Switzerland with `st_intersection()`. Here, too, two small pre-processing steps are required:

1. As before, we have to merge the individual cantonal polygons. We achieve this with `st_union()`. We save the output as `switzerland`, which as a result returns a single polygon in the shape of the Swiss borders.
2. For the Thiessen polygons, we do exactly the opposite: `st_voronoi()` provides a single feature with all polygons, which has not been clipped. With `st_cast()`, the `GEOMETRYCOLLECTION` is divided into single polygons.

```{r}
thiessen_polygons <- st_cast(thiessen_polygons)

thiessen_polygons_clip <- st_intersection(thiessen_polygons, switzerland)
```

```{r}
#| output: true

ggplot() +
  geom_sf(data = switzerland) +
  geom_sf(data = thiessen_polygons_clip, fill = NA)
```

Now we just need to determine the respective value for each polygon. We achieve this again with `st_join()`. Here, too, a *small* preprocessing step is necessary: We convert the `sfc` object (only geometries) into an `sf` object (geometries with attribute table).

```{r}
thiessen_polygons_clip <- st_as_sf(thiessen_polygons_clip)
thiessen_polygons_clip <- st_join(thiessen_polygons_clip, air_quality)
```

```{r}
#| output: true
#| label: fig-ggplot-ex2-final
#| fig.cap: Nitrogen Dioxide (NO2) in μg/m3, Interpolate all of Switzerland using the Nearest Neighbour method.

ggplot() +
  geom_sf(data = switzerland) +
  geom_sf(data = thiessen_polygons_clip, aes(fill = value)) +
  geom_sf(data = air_quality) +
  scale_fill_gradientn(colors = rev(RColorBrewer::brewer.pal(11, "RdYlBu"))) +
  theme_void() +
  theme(
    legend.position = "bottom", legend.title = element_blank(),
    legend.key.width = unit(0.10, "npc"),
    legend.key.height = unit(0.02, "npc")
  )
```
