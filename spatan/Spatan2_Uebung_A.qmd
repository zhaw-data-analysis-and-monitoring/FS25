---
date: 2024-04-30
lesson: SpatAn2
topic: Vector Data
index: 3
execute:
  echo: false # set to true to show sample solution
  output: false # set to true to show sample solution
code-fold: true
code-summary: "Sample Solution"
knitr:
  opts_chunk:
    collapse: true  
---

# SpatAn 2: Exercise A

Please download the data for todays exercise here: {{< var datasets.SpatAn2 >}}.

In [the last exercise](#sec-spatan1b), we performed a spatial join between trees and meadows to find out whether a tree is in a meadow or not using data from the Gr√ºental campus (*gruental.gpkg*)

Today we will go a step further and try to answer the following question: *How much meadow is there within 20 metres of each tree?*

To do this, load the required libraries and records into your session. Explore the data and visualize it spatially.

```{r}
#| echo: true
#| code-fold: false

library("dplyr")
library("sf")
library("ggplot2")

meadows <- read_sf("datasets/rauman/gruental.gpkg", "wiesen")
trees <- read_sf("datasets/rauman/gruental.gpkg", "baeume")
```

In order to simplify the exercise a little, we will only work with 10 trees at first. Use the code below to randomly select 10 trees. If you use the same "seed" as we have` (set.seed(100)`), you should also "coincidentally" have the same trees as me.

```{r}
#| echo: true
#| code-fold: false

set.seed(100)
trees_sample <- sample_n(trees, 10)
```

```{r}
#| echo: true
#| code-fold: false
#| output: true

ggplot() +
  geom_sf(data = meadows) +
  geom_sf(data = trees_sample)
```

## Task 1

As a first step, we need to apply a 20m buffer to each tree. Use `st_buffer` to save the output as `trees_20m`. Now take a close look at `trees_20m`. What type of geometry does it now represent?

```{r}
trees_20m <- st_buffer(trees_sample, 20)
```

```{r}
#| output: true
#| fig-cap: Trees are displayed as points with a 20m buffer. Meadows are displayed in the background.
#| label: fig-buffer1

ggplot() +
  geom_sf(data = meadows) +
  geom_sf(data = trees_sample) +
  geom_sf(data = trees_20m, fill = NA)
```

## Task 2

Now calculate the intersection of `trees_20m` and `meadows` with the `st_intersection` function and save the output as `trees_meadows`. Next explore `trees_meadows`. What happened? Check the number of rows per record. Have they changed? If so, why?

```{r}
#| output: true

trees_meadows <- st_intersection(trees_20m, meadows)

ggplot() +
  geom_sf(data = meadows, fill = "blue", alpha = .2) +
  geom_sf(data = trees_20m, fill = "red", alpha = .2) +
  geom_sf(data = trees_meadows, fill = "green", alpha = 0.2)
```

## Task 3

Now calculate the area per geometry with the `st_area()` function. Save the output in a new column called `trees_meadows` (e.g. with the name `meadow_area`). Tip: Convert the output from `st_area()` to a numeric vector with `as.numeric()`.

```{r}
trees_meadows$meadows_area <- as.numeric(st_area(trees_meadows))
```

## Task 4 (Optional)

Now calculate the `meadow_share` from `meadow_area`. Tip: The circular area of $r^2\times \pi$ is 100%, whereas in our case, $r = 20$.

```{r}
area_of_a_circle <- 20^2 * pi
trees_meadows$meadows_share <- trees_meadows$meadows_area / area_of_a_circle
```

Then transfer the calculated proportional values to the `trees` dataset with a `left_ join()` between `trees` and `trees_meadows`. Which column would be suitable for this join? Note: Use `st_drop_geometry()` to remove the geometry column in `trees_meadows` before joining.

```{r}
#| output: true
#| label: fig-ggplot-ex4
#| fig.cap: After this exercise, you can visualise the results like this. 

trees_meadows_df <- st_drop_geometry(trees_meadows)

trees_2 <- left_join(trees_sample, trees_meadows_df, by = "baum_id")

ggplot() +
  geom_sf(data = meadows) +
  geom_sf(data = trees_2, aes(colour = meadows_share)) +
  scale_color_binned("meadows share", low = "blue", high = "red", limits = c(0, 1), label = scales::label_percent()) +
  coord_sf(datum = 2056)
```

## Task 5 {#sec-raster-intro1}

By now you have performed a few vector operations such as `st_buffer()` and `st_intersection()` and `st_area()`. However, certain questions are better answered using the raster format. For example, if we want to know how far the nearest tree is for each point in the room, this can be better represented in a raster.

However, before we can answer that question, we have to convert the vector data set into a raster data set. To do this, a raster "template" is needed so that R knows roughly what the raster output should look like.

```{r}
#| echo: true

# Use the "terra" package to work with the raster format.
library("terra")

# We need a template to vectorise data 
# We will use "meadows" as a template and set the cell size (resolution)
template <- rast(meadows, resolution = 20)

# When we rasterise, we convert "trees" into a raster format
# Use all trees, not trees_sample
trees_rast <- terra::rasterize(trees, template)
```

The difference between raster and vector can be shown very vividly if the two data sets are stored one on top of the other.

```{r}
#| echo: true
#| output: true

plot(trees_rast, col = "grey")
plot(trees, add = TRUE, col = "red", pch = "x")
```

 we can now use the function `distance()` with `trees_rast` to calculate the distance to each tree:

```{r}
#| echo: true
#| output: true

trees_dist <- distance(trees_rast)
plot(trees_dist)
plot(trees, add = TRUE, pch = "x")
```
